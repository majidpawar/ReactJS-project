{"ast":null,"code":"var _jsxFileName = \"D:\\\\UPGRAD\\\\React Assignment\\\\Final\\\\src\\\\screens\\\\home\\\\Home.js\";\nimport React, { Component } from 'react';\nimport './Home.css';\nimport Header from '../../common/header/Header';\nimport { withStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper\n  },\n  upcomingMoviesHeading: {\n    textAlign: 'center',\n    background: '#ff9999',\n    padding: '8px',\n    fontSize: '1rem'\n  },\n  gridListUpcomingMovies: {\n    flexWrap: 'nowrap',\n    transform: 'translateZ(0)',\n    width: '100%'\n  },\n  gridListMain: {\n    transform: 'translateZ(0)',\n    cursor: 'pointer'\n  },\n  formControl: {\n    margin: theme.spacing.unit,\n    minWidth: 240,\n    maxWidth: 240\n  },\n  title: {\n    color: theme.palette.primary.light\n  }\n});\n\nclass Home extends Component {\n  constructor() {\n    super();\n\n    this.movieNameChangeHandler = event => {\n      this.setState({\n        movieName: event.target.value\n      });\n    };\n\n    this.genreSelectHandler = event => {\n      this.setState({\n        genres: event.target.value\n      });\n    };\n\n    this.artistSelectHandler = event => {\n      this.setState({\n        artists: event.target.value\n      });\n    };\n\n    this.releaseDateStartHandler = event => {\n      this.setState({\n        releaseDateStart: event.target.value\n      });\n    };\n\n    this.releaseDateEndHandler = event => {\n      this.setState({\n        releaseDateEnd: event.target.value\n      });\n    };\n\n    this.movieClickHandler = movieId => {\n      this.props.history.push('/movie/' + movieId);\n    };\n\n    this.filterApplyHandler = () => {\n      let queryString = \"?status=RELEASED\";\n\n      if (this.state.movieName !== \"\") {\n        queryString += \"&title=\" + this.state.movieName;\n      }\n\n      if (this.state.genres.length > 0) {\n        queryString += \"&genres=\" + this.state.genres.toString();\n      }\n\n      if (this.state.artists.length > 0) {\n        queryString += \"&artists=\" + this.state.artists.toString();\n      }\n\n      if (this.state.releaseDateStart !== \"\") {\n        queryString += \"&start_date=\" + this.state.releaseDateStart;\n      }\n\n      if (this.state.releaseDateEnd !== \"\") {\n        queryString += \"&end_date=\" + this.state.releaseDateEnd;\n      }\n\n      let that = this;\n      let dataFilter = null;\n      let xhrFilter = new XMLHttpRequest();\n      xhrFilter.addEventListener(\"readystatechange\", function () {\n        if (this.readyState === 4) {\n          that.setState({\n            releasedMovies: JSON.parse(this.responseText).movies\n          });\n        }\n      });\n      xhrFilter.open(\"GET\", this.props.baseUrl + \"movies\" + encodeURI(queryString));\n      xhrFilter.setRequestHeader(\"Cache-Control\", \"no-cache\");\n      xhrFilter.send(dataFilter);\n    };\n\n    this.state = {\n      movieName: \"\",\n      upcomingMovies: [],\n      releasedMovies: [],\n      genres: [],\n      artists: [],\n      genresList: [],\n      artistsList: [],\n      releaseDateStart: \"\",\n      releaseDateEnd: \"\"\n    };\n  }\n\n  componentWillMount() {\n    // Get upcoming movies\n    let data = null;\n    let xhr = new XMLHttpRequest();\n    let that = this;\n    xhr.addEventListener(\"readystatechange\", function () {\n      if (this.readyState === 4) {\n        that.setState({\n          upcomingMovies: JSON.parse(this.responseText).movies\n        });\n      }\n    });\n    xhr.open(\"GET\", this.props.baseUrl + \"movies?status=PUBLISHED\");\n    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n    xhr.send(data); // Get released movies\n\n    let dataReleased = null;\n    let xhrReleased = new XMLHttpRequest();\n    xhrReleased.addEventListener(\"readystatechange\", function () {\n      if (this.readyState === 4) {\n        that.setState({\n          releasedMovies: JSON.parse(this.responseText).movies\n        });\n      }\n    });\n    xhrReleased.open(\"GET\", this.props.baseUrl + \"movies?status=RELEASED\");\n    xhrReleased.setRequestHeader(\"Cache-Control\", \"no-cache\");\n    xhrReleased.send(dataReleased); // Get filters\n\n    let dataGenres = null;\n    let xhrGenres = new XMLHttpRequest();\n    xhrGenres.addEventListener(\"readystatechange\", function () {\n      if (this.readyState === 4) {\n        that.setState({\n          genresList: JSON.parse(this.responseText).genres\n        });\n      }\n    });\n    xhrGenres.open(\"GET\", this.props.baseUrl + \"genres\");\n    xhrGenres.setRequestHeader(\"Cache-Control\", \"no-cache\");\n    xhrGenres.send(dataGenres); // Get artists\n\n    let dataArtists = null;\n    let xhrArtists = new XMLHttpRequest();\n    xhrArtists.addEventListener(\"readystatechange\", function () {\n      if (this.readyState === 4) {\n        that.setState({\n          artistsList: JSON.parse(this.responseText).artists\n        });\n      }\n    });\n    xhrArtists.open(\"GET\", this.props.baseUrl + \"artists\");\n    xhrArtists.setRequestHeader(\"Cache-Control\", \"no-cache\");\n    xhrArtists.send(dataArtists);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        baseUrl: this.props.baseUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.upcomingMoviesHeading,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Upcoming Movies\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GridList, {\n        cols: 5,\n        className: classes.gridListUpcomingMovies,\n        children: this.state.upcomingMovies.map(movie => /*#__PURE__*/_jsxDEV(GridListTile, {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: movie.poster_url,\n            className: \"movie-poster\",\n            alt: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(GridListTileBar, {\n            title: movie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 29\n          }, this)]\n        }, \"upcoming\" + movie.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left\",\n          children: /*#__PURE__*/_jsxDEV(GridList, {\n            cellHeight: 350,\n            cols: 4,\n            className: classes.gridListMain,\n            children: this.state.releasedMovies.map(movie => /*#__PURE__*/_jsxDEV(GridListTile, {\n              onClick: () => this.movieClickHandler(movie.id),\n              className: \"released-movie-grid-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: movie.poster_url,\n                className: \"movie-poster\",\n                alt: movie.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(GridListTileBar, {\n                title: movie.title,\n                subtitle: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [\"Release Date: \", new Date(movie.release_date).toDateString()]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 51\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 37\n              }, this)]\n            }, \"grid\" + movie.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                className: classes.formControl,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  className: classes.title,\n                  color: \"textSecondary\",\n                  children: \"FIND MOVIES BY:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 226,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                className: classes.formControl,\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  htmlFor: \"movieName\",\n                  children: \"Movie Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 232,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Input, {\n                  id: \"movieName\",\n                  onChange: this.movieNameChangeHandler\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                className: classes.formControl,\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  htmlFor: \"select-multiple-checkbox\",\n                  children: \"Genres\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  multiple: true,\n                  input: /*#__PURE__*/_jsxDEV(Input, {\n                    id: \"select-multiple-checkbox-genre\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 240,\n                    columnNumber: 48\n                  }, this),\n                  renderValue: selected => selected.join(','),\n                  value: this.state.genres,\n                  onChange: this.genreSelectHandler,\n                  children: this.state.genresList.map(genre => /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: genre.genre,\n                    children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: this.state.genres.indexOf(genre.genre) > -1\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 247,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                      primary: genre.genre\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 248,\n                      columnNumber: 49\n                    }, this)]\n                  }, genre.id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 246,\n                    columnNumber: 45\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 238,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                className: classes.formControl,\n                children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                  htmlFor: \"select-multiple-checkbox\",\n                  children: \"Artists\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Select, {\n                  multiple: true,\n                  input: /*#__PURE__*/_jsxDEV(Input, {\n                    id: \"select-multiple-checkbox\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 258,\n                    columnNumber: 48\n                  }, this),\n                  renderValue: selected => selected.join(','),\n                  value: this.state.artists,\n                  onChange: this.artistSelectHandler,\n                  children: this.state.artistsList.map(artist => /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: artist.first_name + \" \" + artist.last_name,\n                    children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: this.state.artists.indexOf(artist.first_name + \" \" + artist.last_name) > -1\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 265,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                      primary: artist.first_name + \" \" + artist.last_name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 266,\n                      columnNumber: 49\n                    }, this)]\n                  }, artist.id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 264,\n                    columnNumber: 45\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 256,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                className: classes.formControl,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  id: \"releaseDateStart\",\n                  label: \"Release Date Start\",\n                  type: \"date\",\n                  defaultValue: \"\",\n                  InputLabelProps: {\n                    shrink: true\n                  },\n                  onChange: this.releaseDateStartHandler\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 273,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                className: classes.formControl,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  id: \"releaseDateEnd\",\n                  label: \"Release Date End\",\n                  type: \"date\",\n                  defaultValue: \"\",\n                  InputLabelProps: {\n                    shrink: true\n                  },\n                  onChange: this.releaseDateEndHandler\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 284,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 39\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                className: classes.formControl,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: () => this.filterApplyHandler(),\n                  variant: \"contained\",\n                  color: \"primary\",\n                  children: \"APPLY\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 295,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default withStyles(styles)(Home);","map":{"version":3,"sources":["D:/UPGRAD/React Assignment/Final/src/screens/home/Home.js"],"names":["React","Component","Header","withStyles","GridList","GridListTile","GridListTileBar","Card","CardContent","FormControl","Typography","InputLabel","Input","Select","MenuItem","Checkbox","ListItemText","TextField","Button","styles","theme","root","flexGrow","backgroundColor","palette","background","paper","upcomingMoviesHeading","textAlign","padding","fontSize","gridListUpcomingMovies","flexWrap","transform","width","gridListMain","cursor","formControl","margin","spacing","unit","minWidth","maxWidth","title","color","primary","light","Home","constructor","movieNameChangeHandler","event","setState","movieName","target","value","genreSelectHandler","genres","artistSelectHandler","artists","releaseDateStartHandler","releaseDateStart","releaseDateEndHandler","releaseDateEnd","movieClickHandler","movieId","props","history","push","filterApplyHandler","queryString","state","length","toString","that","dataFilter","xhrFilter","XMLHttpRequest","addEventListener","readyState","releasedMovies","JSON","parse","responseText","movies","open","baseUrl","encodeURI","setRequestHeader","send","upcomingMovies","genresList","artistsList","componentWillMount","data","xhr","dataReleased","xhrReleased","dataGenres","xhrGenres","dataArtists","xhrArtists","render","classes","map","movie","poster_url","id","Date","release_date","toDateString","selected","join","genre","indexOf","artist","first_name","last_name","shrink"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Home.css';\nimport Header from '../../common/header/Header';\nimport { withStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper\n    },\n    upcomingMoviesHeading: {\n        textAlign: 'center',\n        background: '#ff9999',\n        padding: '8px',\n        fontSize: '1rem'\n    },\n    gridListUpcomingMovies: {\n        flexWrap: 'nowrap',\n        transform: 'translateZ(0)',\n        width: '100%'\n    },\n    gridListMain: {\n        transform: 'translateZ(0)',\n        cursor: 'pointer'\n    },\n    formControl: {\n        margin: theme.spacing.unit,\n        minWidth: 240,\n        maxWidth: 240\n    },\n    title: {\n        color: theme.palette.primary.light,\n    }\n});\n\nclass Home extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            movieName: \"\",\n            upcomingMovies: [],\n            releasedMovies: [],\n            genres: [],\n            artists: [],\n            genresList: [],\n            artistsList: [],\n            releaseDateStart: \"\",\n            releaseDateEnd: \"\"\n        }\n    }\n\n    componentWillMount() {\n        // Get upcoming movies\n        let data = null;\n        let xhr = new XMLHttpRequest();\n        let that = this;\n        xhr.addEventListener(\"readystatechange\", function () {\n            if (this.readyState === 4) {\n                that.setState({\n                    upcomingMovies: JSON.parse(this.responseText).movies\n                });\n            }\n        });\n\n        xhr.open(\"GET\", this.props.baseUrl + \"movies?status=PUBLISHED\");\n        xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhr.send(data);\n\n        // Get released movies\n        let dataReleased = null;\n        let xhrReleased = new XMLHttpRequest();\n        xhrReleased.addEventListener(\"readystatechange\", function () {\n            if (this.readyState === 4) {\n                that.setState({\n                    releasedMovies: JSON.parse(this.responseText).movies\n                });\n            }\n        });\n\n        xhrReleased.open(\"GET\", this.props.baseUrl + \"movies?status=RELEASED\");\n        xhrReleased.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhrReleased.send(dataReleased);\n\n        // Get filters\n        let dataGenres = null;\n        let xhrGenres = new XMLHttpRequest();\n        xhrGenres.addEventListener(\"readystatechange\", function () {\n            if (this.readyState === 4) {\n                that.setState({\n                    genresList: JSON.parse(this.responseText).genres\n                });\n            }\n        });\n\n        xhrGenres.open(\"GET\", this.props.baseUrl + \"genres\");\n        xhrGenres.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhrGenres.send(dataGenres);\n\n        // Get artists\n        let dataArtists = null;\n        let xhrArtists = new XMLHttpRequest();\n        xhrArtists.addEventListener(\"readystatechange\", function () {\n            if (this.readyState === 4) {\n                that.setState({\n                    artistsList: JSON.parse(this.responseText).artists\n                });\n            }\n        });\n\n        xhrArtists.open(\"GET\", this.props.baseUrl + \"artists\");\n        xhrArtists.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhrArtists.send(dataArtists);\n    }\n\n    movieNameChangeHandler = event => {\n        this.setState({ movieName: event.target.value });\n    }\n\n    genreSelectHandler = event => {\n        this.setState({ genres: event.target.value });\n    }\n\n    artistSelectHandler = event => {\n        this.setState({ artists: event.target.value });\n    }\n\n    releaseDateStartHandler = event => {\n        this.setState({ releaseDateStart: event.target.value });\n    }\n\n    releaseDateEndHandler = event => {\n        this.setState({ releaseDateEnd: event.target.value });\n    }\n\n    movieClickHandler = (movieId) => {\n        this.props.history.push('/movie/' + movieId);\n    }\n\n    filterApplyHandler = () => {\n        let queryString = \"?status=RELEASED\";\n        if (this.state.movieName !== \"\") {\n            queryString += \"&title=\" + this.state.movieName;\n        }\n        if (this.state.genres.length > 0) {\n            queryString += \"&genres=\" + this.state.genres.toString();\n        }\n        if (this.state.artists.length > 0) {\n            queryString += \"&artists=\" + this.state.artists.toString();\n        }\n        if (this.state.releaseDateStart !== \"\") {\n            queryString += \"&start_date=\" + this.state.releaseDateStart;\n        }\n        if (this.state.releaseDateEnd !== \"\") {\n            queryString += \"&end_date=\" + this.state.releaseDateEnd;\n        }\n\n        let that = this;\n        let dataFilter = null;\n        let xhrFilter = new XMLHttpRequest();\n        xhrFilter.addEventListener(\"readystatechange\", function () {\n            if (this.readyState === 4) {\n                that.setState({\n                    releasedMovies: JSON.parse(this.responseText).movies\n                });\n            }\n        });\n\n        xhrFilter.open(\"GET\", this.props.baseUrl + \"movies\" + encodeURI(queryString));\n        xhrFilter.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhrFilter.send(dataFilter);\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div>\n                <Header baseUrl={this.props.baseUrl} />\n\n                <div className={classes.upcomingMoviesHeading}>\n                    <span>Upcoming Movies</span>\n                </div>\n\n                <GridList cols={5} className={classes.gridListUpcomingMovies} >\n                    {this.state.upcomingMovies.map(movie => (\n                        <GridListTile key={\"upcoming\" + movie.id}>\n                            <img src={movie.poster_url} className=\"movie-poster\" alt={movie.title} />\n                            <GridListTileBar title={movie.title} />\n                        </GridListTile>\n                    ))}\n                </GridList>\n\n                <div className=\"flex-container\">\n                    <div className=\"left\">\n                        <GridList cellHeight={350} cols={4} className={classes.gridListMain}>\n                            {this.state.releasedMovies.map(movie => (\n                                <GridListTile onClick={() => this.movieClickHandler(movie.id)} className=\"released-movie-grid-item\" key={\"grid\" + movie.id}>\n                                    <img src={movie.poster_url} className=\"movie-poster\" alt={movie.title} />\n                                    <GridListTileBar\n                                        title={movie.title}\n                                        subtitle={<span>Release Date: {new Date(movie.release_date).toDateString()}</span>}\n                                    />\n                                </GridListTile>\n                            ))}\n                        </GridList>\n                    </div>\n                    <div className=\"right\">\n                        <Card>\n                            <CardContent>\n                                <FormControl className={classes.formControl}>\n                                    <Typography className={classes.title} color=\"textSecondary\">\n                                        FIND MOVIES BY:\n                                    </Typography>\n                                </FormControl>\n\n                                <FormControl className={classes.formControl}>\n                                    <InputLabel htmlFor=\"movieName\">Movie Name</InputLabel>\n                                    <Input id=\"movieName\" onChange={this.movieNameChangeHandler} />\n                                </FormControl>\n\n                                <FormControl className={classes.formControl}>\n                                    <InputLabel htmlFor=\"select-multiple-checkbox\">Genres</InputLabel>\n                                    <Select\n                                        multiple\n                                        input={<Input id=\"select-multiple-checkbox-genre\" />}\n                                        renderValue={selected => selected.join(',')}\n                                        value={this.state.genres}\n                                        onChange={this.genreSelectHandler}\n                                    >\n                                        {this.state.genresList.map(genre => (\n                                            <MenuItem key={genre.id} value={genre.genre}>\n                                                <Checkbox checked={this.state.genres.indexOf(genre.genre) > -1} />\n                                                <ListItemText primary={genre.genre} />\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                </FormControl>\n\n                                <FormControl className={classes.formControl}>\n                                    <InputLabel htmlFor=\"select-multiple-checkbox\">Artists</InputLabel>\n                                    <Select\n                                        multiple\n                                        input={<Input id=\"select-multiple-checkbox\" />}\n                                        renderValue={selected => selected.join(',')}\n                                        value={this.state.artists}\n                                        onChange={this.artistSelectHandler}\n                                    >\n                                        {this.state.artistsList.map(artist => (\n                                            <MenuItem key={artist.id} value={artist.first_name + \" \" + artist.last_name}>\n                                                <Checkbox checked={this.state.artists.indexOf(artist.first_name + \" \" + artist.last_name) > -1} />\n                                                <ListItemText primary={artist.first_name + \" \" + artist.last_name} />\n                                            </MenuItem>\n                                        ))}\n                                    </Select>\n                                </FormControl>\n\n                                <FormControl className={classes.formControl}>\n                                    <TextField\n                                        id=\"releaseDateStart\"\n                                        label=\"Release Date Start\"\n                                        type=\"date\"\n                                        defaultValue=\"\"\n                                        InputLabelProps={{ shrink: true }}\n                                        onChange={this.releaseDateStartHandler}\n                                    />\n                                </FormControl>\n\n                                <FormControl className={classes.formControl}>\n                                    <TextField\n                                        id=\"releaseDateEnd\"\n                                        label=\"Release Date End\"\n                                        type=\"date\"\n                                        defaultValue=\"\"\n                                        InputLabelProps={{ shrink: true }}\n                                        onChange={this.releaseDateEndHandler}\n                                    />\n                                </FormControl>\n                                <br /><br />\n                                <FormControl className={classes.formControl}>\n                                    <Button onClick={() => this.filterApplyHandler()} variant=\"contained\" color=\"primary\">\n                                        APPLY\n                                    </Button>\n                                </FormControl>\n                            </CardContent>\n                        </Card>\n                    </div>\n                </div>\n            </div >\n        )\n    }\n}\n\nexport default withStyles(styles)(Home);"]},"metadata":{},"sourceType":"module"}