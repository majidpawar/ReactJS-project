{"ast":null,"code":"var _jsxFileName = \"D:\\\\UPGRAD\\\\React Assignment\\\\Final\\\\src\\\\screens\\\\bookshow\\\\BookShow.js\";\nimport React, { Component } from 'react';\nimport Header from '../../common/header/Header';\nimport Typography from '@material-ui/core/Typography';\nimport './BookShow.css';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BookShow extends Component {\n  constructor() {\n    super();\n\n    this.locationChangeHandler = event => {\n      this.setState({\n        location: event.target.value\n      });\n      let newTheatres = [];\n\n      for (let show of this.state.originalShows) {\n        if (show.theatre.city === event.target.value) {\n          newTheatres.push({\n            id: show.theatre.name,\n            theatre: show.theatre.name\n          });\n        }\n      }\n\n      newTheatres = newTheatres.filter((theatre, index, self) => index === self.findIndex(t => t.id === theatre.id));\n      this.setState({\n        theatres: newTheatres\n      });\n    };\n\n    this.theatreChangeHandler = event => {\n      this.setState({\n        theatre: event.target.value\n      });\n      let newLanguages = [];\n\n      for (let show of this.state.originalShows) {\n        if (show.theatre.city === this.state.location && show.theatre.name === event.target.value) {\n          newLanguages.push({\n            id: show.language,\n            language: show.language\n          });\n        }\n      }\n\n      newLanguages = newLanguages.filter((lang, index, self) => index === self.findIndex(l => l.id === lang.id));\n      this.setState({\n        languages: newLanguages\n      });\n    };\n\n    this.languageChangeHandler = event => {\n      this.setState({\n        language: event.target.value\n      });\n      let newShowDates = [];\n\n      for (let show of this.state.originalShows) {\n        if (show.theatre.city === this.state.location && show.theatre.name === this.state.theatre && show.language === event.target.value) {\n          newShowDates.push({\n            id: show.show_timing,\n            showDate: show.show_timing\n          });\n        }\n      }\n\n      newShowDates = newShowDates.filter((date, index, self) => index === self.findIndex(d => d.id === date.id));\n      this.setState({\n        showDates: newShowDates\n      });\n    };\n\n    this.showDateChangeHandler = event => {\n      this.setState({\n        showDate: event.target.value\n      });\n      let unitPrice = 0;\n      let availableTickets = 0;\n\n      for (let show of this.state.originalShows) {\n        if (show.theatre.city === this.state.location && show.theatre.name === this.state.theatre && show.language === this.state.language && show.show_timing === event.target.value) {\n          unitPrice = show.unit_price;\n          availableTickets = show.available_seats;\n          this.setState({\n            showId: show.id\n          });\n        }\n      }\n\n      this.setState({\n        unitPrice: unitPrice,\n        availableTickets: availableTickets\n      });\n    };\n\n    this.ticketsChangeHandler = event => {\n      this.setState({\n        tickets: event.target.value.split(\",\")\n      });\n    };\n\n    this.bookShowButtonHandler = () => {\n      this.state.location === \"\" ? this.setState({\n        reqLocation: \"dispBlock\"\n      }) : this.setState({\n        reqLocation: \"dispNone\"\n      });\n      this.state.theatre === \"\" ? this.setState({\n        reqTheatre: \"dispBlock\"\n      }) : this.setState({\n        reqTheatre: \"dispNone\"\n      });\n      this.state.language === \"\" ? this.setState({\n        reqLanguage: \"dispBlock\"\n      }) : this.setState({\n        reqLanguage: \"dispNone\"\n      });\n      this.state.showDate === \"\" ? this.setState({\n        reqShowDate: \"dispBlock\"\n      }) : this.setState({\n        reqShowDate: \"dispNone\"\n      });\n      this.state.tickets === 0 ? this.setState({\n        reqTickets: \"dispBlock\"\n      }) : this.setState({\n        reqTickets: \"dispNone\"\n      });\n\n      if (this.state.location === \"\" || this.state.theatre === \"\" || this.state.language === \"\" || this.state.showDate === \"\" || this.state.tickets === 0) {\n        return;\n      }\n\n      this.props.history.push({\n        pathname: '/confirm/' + this.props.match.params.id,\n        bookingSummary: this.state\n      });\n    };\n\n    this.state = {\n      location: \"\",\n      theatre: \"\",\n      language: \"\",\n      showDate: \"\",\n      tickets: 0,\n      unitPrice: 500,\n      availableTickets: 20,\n      reqLocation: \"dispNone\",\n      reqTheatre: \"dispNone\",\n      reqLanguage: \"dispNone\",\n      reqShowDate: \"dispNone\",\n      reqTickets: \"dispNone\",\n      locations: [],\n      languages: [],\n      theatres: [],\n      showDates: [],\n      showTimes: [],\n      originalShows: []\n    };\n  }\n\n  componentWillMount() {\n    let that = this;\n    let dataShows = null;\n    let xhrShows = new XMLHttpRequest();\n    xhrShows.addEventListener(\"readystatechange\", function () {\n      if (this.readyState === 4) {\n        let response = JSON.parse(this.responseText);\n        that.setState({\n          originalShows: response.shows\n        });\n        let newLocations = [];\n\n        for (let show of response.shows) {\n          newLocations.push({\n            id: show.theatre.city,\n            location: show.theatre.city\n          });\n        }\n\n        newLocations = newLocations.filter((loc, index, self) => index === self.findIndex(c => c.id === loc.id));\n        that.setState({\n          locations: newLocations\n        });\n      }\n    });\n    xhrShows.open(\"GET\", this.props.baseUrl + \"movies/\" + this.props.match.params.id + \"/shows\");\n    xhrShows.setRequestHeader(\"Cache-Control\", \"no-cache\");\n    xhrShows.send(dataShows);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bookShow\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: \"back\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/movie/\" + this.props.match.params.id,\n            children: \"< Back to Movie Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          className: \"cardStyle\",\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"headline\",\n              component: \"h2\",\n              children: \"BOOK SHOW\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 42\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              required: true,\n              className: \"formControl\",\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                htmlFor: \"location\",\n                children: \"Choose Location:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                value: this.state.location,\n                onChange: this.locationChangeHandler,\n                children: this.state.locations.map(loc => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: loc.location,\n                  children: loc.location\n                }, \"loc\" + loc.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 41\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n                className: this.state.reqLocation,\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"red\",\n                  children: \"Required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 193,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              required: true,\n              className: \"formControl\",\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                htmlFor: \"theatre\",\n                children: \"Choose Theatre:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                value: this.state.theatre,\n                onChange: this.theatreChangeHandler,\n                children: this.state.theatres.map(th => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: th.theatre,\n                  children: th.theatre\n                }, \"theatre\" + th.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 41\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n                className: this.state.reqTheatre,\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"red\",\n                  children: \"Required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 210,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              required: true,\n              className: \"formControl\",\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                htmlFor: \"language\",\n                children: \"Choose Language:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                value: this.state.language,\n                onChange: this.languageChangeHandler,\n                children: this.state.languages.map(lang => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: lang.language,\n                  children: lang.language\n                }, \"lang\" + lang.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 221,\n                  columnNumber: 41\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n                className: this.state.reqLanguage,\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"red\",\n                  children: \"Required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              required: true,\n              className: \"formControl\",\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                htmlFor: \"showDate\",\n                children: \"Choose Show Date:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                value: this.state.showDate,\n                onChange: this.showDateChangeHandler,\n                children: this.state.showDates.map(sd => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: sd.showDate,\n                  children: sd.showDate\n                }, \"showDate\" + sd.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 238,\n                  columnNumber: 41\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n                className: this.state.reqShowDate,\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"red\",\n                  children: \"Required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              required: true,\n              className: \"formControl\",\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                htmlFor: \"tickets\",\n                children: [\"Seat Selection: ( \", this.state.availableTickets, \" available )\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                id: \"tickets\",\n                value: this.state.tickets !== 0 ? this.state.tickets : \"\",\n                onChange: this.ticketsChangeHandler\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n                className: this.state.reqTickets,\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"red\",\n                  children: \"Required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"Unit Price: Rs. \", this.state.unitPrice]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"Total Price: Rs. \", this.state.unitPrice * this.state.tickets.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: this.bookShowButtonHandler,\n              color: \"primary\",\n              children: \"BOOK SHOW\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BookShow;","map":{"version":3,"sources":["D:/UPGRAD/React Assignment/Final/src/screens/bookshow/BookShow.js"],"names":["React","Component","Header","Typography","Card","CardContent","FormControl","InputLabel","Input","Select","MenuItem","Button","FormHelperText","Link","BookShow","constructor","locationChangeHandler","event","setState","location","target","value","newTheatres","show","state","originalShows","theatre","city","push","id","name","filter","index","self","findIndex","t","theatres","theatreChangeHandler","newLanguages","language","lang","l","languages","languageChangeHandler","newShowDates","show_timing","showDate","date","d","showDates","showDateChangeHandler","unitPrice","availableTickets","unit_price","available_seats","showId","ticketsChangeHandler","tickets","split","bookShowButtonHandler","reqLocation","reqTheatre","reqLanguage","reqShowDate","reqTickets","props","history","pathname","match","params","bookingSummary","locations","showTimes","componentWillMount","that","dataShows","xhrShows","XMLHttpRequest","addEventListener","readyState","response","JSON","parse","responseText","shows","newLocations","loc","c","open","baseUrl","setRequestHeader","send","render","map","th","sd","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Header from '../../common/header/Header';\nimport Typography from '@material-ui/core/Typography';\nimport './BookShow.css';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { Link } from 'react-router-dom';\n\nclass BookShow extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            location: \"\",\n            theatre: \"\",\n            language: \"\",\n            showDate: \"\",\n            tickets: 0,\n            unitPrice: 500,\n            availableTickets: 20,\n            reqLocation: \"dispNone\",\n            reqTheatre: \"dispNone\",\n            reqLanguage: \"dispNone\",\n            reqShowDate: \"dispNone\",\n            reqTickets: \"dispNone\",\n            locations: [],\n            languages: [],\n            theatres: [],\n            showDates: [],\n            showTimes: [],\n            originalShows: []\n        }\n    }\n\n    componentWillMount() {\n        let that = this;\n        let dataShows = null;\n        let xhrShows = new XMLHttpRequest();\n        xhrShows.addEventListener(\"readystatechange\", function () {\n            if (this.readyState === 4) {\n                let response = JSON.parse(this.responseText);\n                that.setState({ originalShows: response.shows });\n                let newLocations = [];\n\n                for (let show of response.shows) {\n                    newLocations.push({ id: show.theatre.city, location: show.theatre.city });\n                }\n\n                newLocations = newLocations.filter((loc, index, self) =>\n                    index === self.findIndex((c) => (\n                        c.id === loc.id\n                    ))\n                )\n\n                that.setState({ locations: newLocations })\n            }\n        })\n\n        xhrShows.open(\"GET\", this.props.baseUrl + \"movies/\" + this.props.match.params.id + \"/shows\");\n        xhrShows.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhrShows.send(dataShows);\n    }\n\n    locationChangeHandler = event => {\n        this.setState({ location: event.target.value });\n        let newTheatres = [];\n\n        for (let show of this.state.originalShows) {\n            if (show.theatre.city === event.target.value) {\n                newTheatres.push({ id: show.theatre.name, theatre: show.theatre.name });\n            }\n        }\n\n        newTheatres = newTheatres.filter((theatre, index, self) =>\n            index === self.findIndex((t) => (\n                t.id === theatre.id\n            ))\n        )\n\n        this.setState({ theatres: newTheatres });\n    }\n\n    theatreChangeHandler = event => {\n        this.setState({ theatre: event.target.value });\n\n        let newLanguages = [];\n\n        for (let show of this.state.originalShows) {\n            if (show.theatre.city === this.state.location && show.theatre.name === event.target.value) {\n                newLanguages.push({ id: show.language, language: show.language });\n            }\n        }\n\n        newLanguages = newLanguages.filter((lang, index, self) =>\n            index === self.findIndex((l) => (\n                l.id === lang.id\n            ))\n        )\n        this.setState({ languages: newLanguages });\n    }\n\n    languageChangeHandler = event => {\n        this.setState({ language: event.target.value });\n\n        let newShowDates = [];\n\n        for (let show of this.state.originalShows) {\n            if (show.theatre.city === this.state.location && show.theatre.name === this.state.theatre && show.language === event.target.value) {\n                newShowDates.push({ id: show.show_timing, showDate: show.show_timing });\n            }\n        }\n\n        newShowDates = newShowDates.filter((date, index, self) =>\n            index === self.findIndex((d) => (\n                d.id === date.id\n            ))\n        )\n\n        this.setState({ showDates: newShowDates });\n    }\n\n    showDateChangeHandler = event => {\n        this.setState({ showDate: event.target.value });\n\n        let unitPrice = 0;\n        let availableTickets = 0;\n\n        for (let show of this.state.originalShows) {\n            if (show.theatre.city === this.state.location && show.theatre.name === this.state.theatre && show.language === this.state.language && show.show_timing === event.target.value) {\n                unitPrice = show.unit_price;\n                availableTickets = show.available_seats;\n                this.setState({ showId: show.id });\n            }\n        }\n\n        this.setState({ unitPrice: unitPrice, availableTickets: availableTickets });\n    }\n\n    ticketsChangeHandler = event => {\n        this.setState({ tickets: event.target.value.split(\",\") });\n    }\n\n    bookShowButtonHandler = () => {\n        this.state.location === \"\" ? this.setState({ reqLocation: \"dispBlock\" }) : this.setState({ reqLocation: \"dispNone\" });\n        this.state.theatre === \"\" ? this.setState({ reqTheatre: \"dispBlock\" }) : this.setState({ reqTheatre: \"dispNone\" });\n        this.state.language === \"\" ? this.setState({ reqLanguage: \"dispBlock\" }) : this.setState({ reqLanguage: \"dispNone\" });\n        this.state.showDate === \"\" ? this.setState({ reqShowDate: \"dispBlock\" }) : this.setState({ reqShowDate: \"dispNone\" });\n        this.state.tickets === 0 ? this.setState({ reqTickets: \"dispBlock\" }) : this.setState({ reqTickets: \"dispNone\" });\n\n        if ((this.state.location === \"\") || (this.state.theatre === \"\") || (this.state.language === \"\") || (this.state.showDate === \"\") || (this.state.tickets === 0)) { return; }\n\n        this.props.history.push({\n            pathname: '/confirm/' + this.props.match.params.id,\n            bookingSummary: this.state\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Header />\n                <div className=\"bookShow\">\n                    <Typography className=\"back\" >\n                        <Link to={\"/movie/\" + this.props.match.params.id}>&#60; Back to Movie Details</Link>\n                    </Typography>\n\n                    <Card className=\"cardStyle\">\n                        <CardContent>\n                            <Typography variant=\"headline\" component=\"h2\">\n                                BOOK SHOW\n                            </Typography><br />\n\n                            <FormControl required className=\"formControl\">\n                                <InputLabel htmlFor=\"location\">Choose Location:</InputLabel>\n                                <Select\n                                    value={this.state.location}\n                                    onChange={this.locationChangeHandler}\n                                >\n                                    {this.state.locations.map(loc => (\n                                        <MenuItem key={\"loc\" + loc.id} value={loc.location}>\n                                            {loc.location}\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                                <FormHelperText className={this.state.reqLocation}>\n                                    <span className=\"red\">Required</span>\n                                </FormHelperText>\n                            </FormControl>\n                            <br /><br />\n                            <FormControl required className=\"formControl\">\n                                <InputLabel htmlFor=\"theatre\">Choose Theatre:</InputLabel>\n                                <Select\n                                    value={this.state.theatre}\n                                    onChange={this.theatreChangeHandler}\n                                >\n                                    {this.state.theatres.map(th => (\n                                        <MenuItem key={\"theatre\" + th.id} value={th.theatre}>\n                                            {th.theatre}\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                                <FormHelperText className={this.state.reqTheatre}>\n                                    <span className=\"red\">Required</span>\n                                </FormHelperText>\n                            </FormControl>\n                            <br /><br />\n                            <FormControl required className=\"formControl\">\n                                <InputLabel htmlFor=\"language\">Choose Language:</InputLabel>\n                                <Select\n                                    value={this.state.language}\n                                    onChange={this.languageChangeHandler}\n                                >\n                                    {this.state.languages.map(lang => (\n                                        <MenuItem key={\"lang\" + lang.id} value={lang.language}>\n                                            {lang.language}\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                                <FormHelperText className={this.state.reqLanguage}>\n                                    <span className=\"red\">Required</span>\n                                </FormHelperText>\n                            </FormControl>\n                            <br /><br />\n                            <FormControl required className=\"formControl\">\n                                <InputLabel htmlFor=\"showDate\">Choose Show Date:</InputLabel>\n                                <Select\n                                    value={this.state.showDate}\n                                    onChange={this.showDateChangeHandler}\n                                >\n                                    {this.state.showDates.map(sd => (\n                                        <MenuItem key={\"showDate\" + sd.id} value={sd.showDate}>\n                                            {sd.showDate}\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                                <FormHelperText className={this.state.reqShowDate}>\n                                    <span className=\"red\">Required</span>\n                                </FormHelperText>\n                            </FormControl>\n                            <br /><br />\n                            <FormControl required className=\"formControl\">\n                                <InputLabel htmlFor=\"tickets\">Seat Selection: ( {this.state.availableTickets} available )</InputLabel>\n                                <Input id=\"tickets\" value={this.state.tickets !== 0 ? this.state.tickets : \"\"} onChange={this.ticketsChangeHandler} />\n                                <FormHelperText className={this.state.reqTickets}>\n                                    <span className=\"red\">Required</span>\n                                </FormHelperText>\n                            </FormControl>\n                            <br /><br />\n                            <Typography>\n                                Unit Price: Rs. {this.state.unitPrice}\n                            </Typography>\n                            <br />\n                            <Typography>\n                                Total Price: Rs. {this.state.unitPrice * this.state.tickets.length}\n                            </Typography>\n                            <br /><br />\n                            <Button variant=\"contained\" onClick={this.bookShowButtonHandler} color=\"primary\">\n                                BOOK SHOW\n                            </Button>\n                        </CardContent>\n                    </Card>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default BookShow;"]},"metadata":{},"sourceType":"module"}